import React from "react";
// b∆∞·ªõc 1 : import formik : =>> formik ch·ªãu tr√°ch nhi·ªám x·ª≠ l√Ω c√°c tr·∫°ng th√°i trong form
import { useFormik } from "formik";
// b∆∞·ªõc 3 : import yup ==>> yup ch·ªãu tr√°ch nhi·ªám x·ª≠ l√Ω calidate cho form
import * as Yup from "yup";
import { ToastContainer, toast } from "react-toastify";
import { useNavigate } from "react-router-dom";
import axios from "axios";

function Signin() {
  const navigate = useNavigate();

  // b∆∞·ªõc 2 : khai b√°o formik
  const formik = useFormik({
    initialValues: {
      useName: "",
      fullName: "",
      email: "",
      password: "",
      confirmPassword: "",
    },
    // b∆∞·ªõc 4 : s·ª≠ d·ª•ng yup ƒë·ªÉ vi·∫øt c√°c ƒëi·ªÅu ki·ªán cho √¥ Input
    validationSchema: Yup.object({
      useName: Yup.string()
        .min(5, "C·∫ßn nhi·ªÅu h∆°n 5 k√Ω t·ª±")
        .max(25, "Kh√¥ng ƒë∆∞·ª£c nh·∫≠p qu√° 25 k√Ω t·ª±")
        .required("Kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"),
      fullName: Yup.string()
        .min(5, "C·∫ßn nhi·ªÅu h∆°n 5 k√Ω t·ª±")
        .max(25, "Kh√¥ng ƒë∆∞·ª£c nh·∫≠p qu√° 25 k√Ω t·ª±")
        .required("Kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"),
      email: Yup.string()
        .email("Email ch∆∞a ƒë√∫ng ƒë·ªãnh d·∫°ng")
        .required("Kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"),

      password: Yup.string()
        .min(8, "Nh·∫≠p nhi·ªÅu h∆°n 8 k√Ω t·ª±")
        .required("Kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"),
      confirmPassword: Yup.string()
        .oneOf([Yup.ref("password")], "M·∫≠t kh·∫©u kh√¥ng tr√πng kh·ªõp")
        .required("Kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"),
    }),
    onSubmit: async (values) => {
      const response = await axios.post("http://localhost:6886/user", {
        userName: values.useName,
        fullName: values.fullName,
        email: values.email,
        password: values.password,
        followers: [],
        following: [],
        avata: [
          {
            image:
              "https://phongreviews.com/wp-content/uploads/2022/11/avatar-facebook-mac-dinh-1.jpg",
            activeAvata: true,
          },
        ],
        status: false,
        condition: "unblock",
      });
      console.log(values);
      toast("üòé B·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n th√†nh c√¥ng ü§ûüèª !", {
        position: "top-right",
        autoClose: 3000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "light",
      });
      setTimeout(() => {
        navigate("/login-user");
      }, 3000);

      // ƒê·∫∑t l·∫°i gi√° tr·ªã c·ªßa √¥ input v·ªÅ r·ªóng
      formik.resetForm();
    },
  });

  // s·ª± ki·ªán onSumit

  // console.log("formik", formik.initialValues);

  return (
    <div>
      <div className="m-auto w-[350px] h-[730px] mt-2 ">
        {/* ƒëƒÉng k√Ω */}
        <div className="w-full h-[500px] text-center border ">
          {/* logo */}
          <div className="h-[70px] pt-6  ">
            <i
              data-visualcompletion="css-img"
              aria-label="Instagram"
              className=""
              role="img"
              style={{
                backgroundImage: `url("https://static.cdninstagram.com/rsrc.php/v3/yx/r/WtxJZZ3-9ZP.png")`,
                backgroundPosition: "0px 0px",
                backgroundSize: "176px 186px",
                width: "174px",
                height: "40px",
                backgroundRepeat: " no-repeat",
                display: "inline-block",
              }}
            ></i>
          </div>
          {/* form */}
          <div className=" w-full h-[370px] flex flex-col items-center mt-5">
            <form onSubmit={formik.handleSubmit}>
              <input
                className="inline-block w-[260px] h-[30px] pl-2 rounded-xl outline-none border mb-3"
                type="text"
                placeholder="Email"
                name="email"
                value={formik.values.email}
                onChange={formik.handleChange}
              />
              {formik.errors.email && formik.touched.email && (
                <p className="text-xs text-red-500 h-[5px]">
                  {formik.errors.email}
                </p>
              )}

              <input
                className="inline-block  w-[260px] h-[30px] pl-2 rounded-xl outline-none border mb-3"
                type="text"
                placeholder="T√™n ƒë·∫ßy ƒë·ªß"
                name="fullName"
                value={formik.values.fullName}
                onChange={formik.handleChange}
              />
              {formik.errors.fullName && formik.touched.fullName && (
                <p className="text-xs text-red-500 h-[5px]">
                  {formik.errors.fullName}
                </p>
              )}

              <input
                className="inline-block  w-[260px] h-[30px] pl-2 rounded-xl outline-none border mb-3"
                type="text"
                placeholder="T√™n ng∆∞·ªùi d√πng"
                name="useName"
                value={formik.values.useName}
                onChange={formik.handleChange}
              />
              {formik.errors.useName && formik.touched.useName && (
                <p className="text-xs text-red-500 h-[5px]">
                  {formik.errors.useName}
                </p>
              )}

              <input
                className="inline-block  w-[260px] h-[30px] pl-2 rounded-xl outline-none border mb-3"
                type="password"
                placeholder="M·∫≠t kh·∫©u"
                name="password"
                value={formik.values.password}
                onChange={formik.handleChange}
              />
              {formik.errors.password && formik.touched.password && (
                <p className="text-xs text-red-500 h-[5px]">
                  {formik.errors.password}
                </p>
              )}

              <input
                className="inline-block  w-[260px] h-[30px] pl-2 rounded-xl outline-none border mb-3"
                type="password"
                placeholder="X√°c nh·∫≠n l·∫°i m·∫≠t kh·∫©u"
                name="confirmPassword"
                value={formik.values.confirmPassword}
                onChange={formik.handleChange}
              />
              {formik.errors.confirmPassword &&
                formik.touched.confirmPassword && (
                  <p className="text-xs text-red-500 h-[5px]">
                    {formik.errors.confirmPassword}
                  </p>
                )}

              <button
                type="submit"
                className=" w-[260px] h-[36px] bg-blue-600 font-semibold text-white rounded-xl"
              >
                ƒêƒÉng k√Ω
              </button>
            </form>

            <ToastContainer />
          </div>
        </div>

        {/* ƒëƒÉng nh·∫≠p */}
        <div className=" border w-full h-[80px] mt-2 flex flex-row justify-around items-center">
          <p>B·∫°n ƒë√£ c√≥ t√†i kho·∫£n </p>
          <p className="font-semibold text-blue-500">ƒêƒÉng nh·∫≠p</p>
        </div>

        {/* t·∫£i ·ª©ng d·ª•ng */}
        <div className="mt-2 w-[350px] h-[80px] flex flex-col items-center ">
          <p>t·∫£i ·ª©ng d·ª•ng</p>
          <div>
            <img
              className="w-full object-cover"
              src="https://f9-zpcloud.zdn.vn/4677209805415442285/b47edad87253a00df942.jpg"
              alt=""
            />
          </div>
        </div>
      </div>
    </div>
  );
}

export default Signin;
